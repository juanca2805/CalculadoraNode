"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ee_1 = __importDefault(require("./ee"));
const modifiers = {
    pop: (target, proxy) => () => {
        if (!target.__isWatched)
            return target.pop();
        const result = target.pop();
        const len = target.length;
        const lenStr = '' + len;
        ee_1.default.emit(proxy, lenStr, proxy, lenStr, 'remove', result, undefined);
        ee_1.default.emit(proxy, 'length', proxy, undefined, 'length', len + 1, len);
        return result;
    },
    push: (target, proxy, getBox) => function (...args) {
        if (!target.__isWatched) {
            const items = args.map(val => getBox(val));
            target.push(...items);
            return target.length;
        }
        args.forEach((value) => {
            const len = target.length;
            const newValue = getBox(value);
            target[len] = newValue;
            const lenStr = '' + len;
            ee_1.default.emit(proxy, lenStr, proxy, lenStr, 'insert', undefined, newValue);
        });
        const len = target.length;
        ee_1.default.emit(proxy, 'length', proxy, undefined, 'length', len - args.length, len);
        return target.length;
    },
    reverse: (target, proxy) => () => {
        if (!target.__isWatched) {
            target.reverse();
            return proxy;
        }
        const len = target.length;
        target.reverse();
        const half = Math.floor(len / 2);
        let count = 0;
        while (count < half) {
            const distCount = len - count - 1;
            const oldValue = target[distCount];
            const newValue = target[count];
            const countStr = '' + count;
            const distCountStr = '' + distCount;
            ee_1.default.emit(proxy, countStr, proxy, countStr, 'swap', oldValue, newValue);
            ee_1.default.emit(proxy, distCountStr, proxy, distCountStr, 'swap', newValue, oldValue);
            ++count;
        }
        return proxy;
    },
    shift: (target, proxy) => () => {
        if (!target.__isWatched)
            return target.shift();
        const shifted = target.shift();
        ee_1.default.emit(proxy, '0', proxy, '0', 'remove', shifted, undefined);
        const len = target.length;
        ee_1.default.emit(proxy, 'length', proxy, '0', 'length', len + 1, len);
        return shifted;
    },
    sort(target, proxy) {
        return function (fn) {
            if (!target.__isWatched) {
                target.sort(fn);
                return proxy;
            }
            const copy = target.slice();
            target.sort(fn);
            target.forEach((item, i) => {
                const oldValue = copy[i];
                if (item !== oldValue) {
                    const istr = '' + i;
                    ee_1.default.emit(proxy, istr, proxy, istr, 'swap', oldValue, item);
                }
            });
            return proxy;
        };
    },
    splice: (target, proxy, getBox) => {
        return function (start, deleteCount, ...entries) {
            if (!target.__isWatched) {
                const items = entries ? getBox(entries) : [];
                if (!('0' in arguments))
                    return [];
                return '1' in arguments
                    ? target.splice(start, deleteCount, ...items)
                    : target.splice(start);
            }
            const initLen = target.length;
            const items = getBox(entries || []);
            start = start > initLen
                ? initLen
                : start > -1
                    ? start
                    : initLen > -start
                        ? initLen + start
                        : 0;
            const nopos = !('1' in arguments) || deleteCount + start > initLen;
            const dCount = nopos
                ? initLen - start
                : deleteCount;
            if (dCount + start > initLen)
                deleteCount = initLen - start;
            const result = getBox(target.splice(start, dCount, ...items) || []);
            const resultLen = result.length;
            const itemsLen = items.length;
            const max = Math.max(resultLen, itemsLen, dCount);
            let count = 0;
            while (count < max) {
                const pos = '' + (start + count);
                const oldValue = result[count];
                const newValue = items[count];
                const kind = resultLen > count && itemsLen > count
                    ? 'set'
                    : itemsLen > count
                        ? 'insert'
                        : 'remove';
                ee_1.default.emit(proxy, pos, proxy, pos, kind, oldValue, newValue);
                ++count;
            }
            if (itemsLen !== resultLen) {
                const pos = nopos ? undefined : '' + (start + itemsLen);
                ee_1.default.emit(proxy, 'length', proxy, pos, 'length', initLen, target.length);
            }
            return result;
        };
    },
    unshift: (target, proxy, getBox) => function (...args) {
        const items = getBox(args);
        if (!target.__isWatched)
            return target.unshift(...items);
        const firstIndexChanged = arguments.length;
        let i = firstIndexChanged;
        while (i--) {
            const value = items[i];
            target.unshift(value);
            ee_1.default.emit(proxy, '0', proxy, '0', 'insert', undefined, value);
        }
        const len = target.length;
        ee_1.default.emit(proxy, 'length', proxy, '' + firstIndexChanged, 'length', len - firstIndexChanged, len);
        return target.length;
    }
};
exports.default = modifiers;
